(retro video game music) - [Instructor] Can you perform the perfect card shuffle with C? A perfect shuffle occurs when the second half of a deck of cards is evenly interspliced with the first half, but it doesn't stop there. You can continue the process taking the second half of the deck and evenly intersplicing it with the first. According to the brainiacs, this process eventually returns the deck to its original order. Your challenge is to code a perfect shuffle routine. Rather than simulate a deck of cards shuffle a character array of 26 uppercase letters of the alphabet. Your code then outputs the number of perfect shuffles required to restore the array back to its original order. Pause the video now to try this challenge on your own, resume when you're ready to compare your code with what I've concocted. (retro video game music) Here is one solution to the problem which relies upon two extra arrays, deck and shuffle declared here at line seven. The original alphabetic array is declared at line six. A while loop at line 15 spins, until the shuffle deck matches the original. A test is made at line 27. The four loop at line 18 does the heavy lifting. Building array shuffle from offsets within array deck. Line 23 is very important to cap the newly created string. And when the if test fails, at line 27, array shuffle is copied to array deck and the process continues shuffling each deck until the test at line 27 is successful. I'll run my solution and you see that it took 20 iterations to restore the deck back to its original order. I often mention that multiple solutions to a problem are possible. And here's another one. I wrote this solution about three years ago. My approach here is to split the deck in a shuffle function, which you can examine on your own. I was more impressed with this solution than with my newer effort, so I've included both solutions in the exercise files. And like me, your solution may be different. If the results are good, consider the challenge past. Use the Q and A to offer insights or to help others solve this puzzle.
