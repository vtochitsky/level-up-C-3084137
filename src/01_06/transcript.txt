Chopping up a string
Selecting transcript lines in this section will navigate to timestamp in the video
- The C language is notoriously weak when it comes to strings. So why not create some string manipulation functions to chop up a string? You're going to bolster C's string weaknesses with the power of three string manipulation functions, left, right, and mid. Here's the definition of the left function. It returns the address of a buffer containing the left len characters of string S. The right function returns the right most len characters of string S, and the mid function returns len characters at an offset within string S. I've written a skeleton for you to use as a start. It contains the sample string here. Once upon a time, there was a string plus a handful of print F statements to output the functions effort. Your job is to code the missing functions. Further, I admonish you not to use any existing C library string functions. Pause the video now to try this exercise on your own. Resume the video to view my solution. (upbeat music) Here is my left function, which is the easiest of the three. Storage is allocated for a buffer at line 10 based on the length past plus one for the null character. The for loop at line 14 copies over the necessary characters from the string past into the new buffer. The string is capped at line 16. Very important that you don't forget this, and then the buffer is returned. The right function has similar features to left, though it uses a character pointer start to reference the end of the string. At line 34, start references the end of the string where it's backed up to find len characters in in order to chop off the right part of the string. The string is then copied over into the buffer, the buffer is capped and returned. The mid function works like the right function though copying characters starts at an offset which is shown at line 61. One is subtracted from this value because the offset doesn't start at zero for the first character. I'll run my solution and if you see this output, your code worked. Even if it doesn't look exactly like mine. Be aware that more testing could be done inside these functions in order to ensure that buffers don't overflow. I leave this task up to you. Use the Q&A to make comments or to offer insights into your own code or into other solutions to this C code challenge.
